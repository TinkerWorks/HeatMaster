from heatmaster.ConfigurationLoader.AutoGenerated import AutoGenerated
import RPi.GPIO as GPIO


class Relay(AutoGenerated):

    def setPin(self, config):
        self.pin_ = int(config)

    def __init__(self, config=None, pin=None):
        super().__init__()
        self.classFinder = {"pin": self.setPin}

        if(config):
            self.loadConfig(config)
        elif(pin):
            self.setPin(pin)
        else:
            err = "Relay has to be initialized with a pin or a config"
            raise ValueError(err)

        # for some reason, disable GPIO Warnings
        GPIO.setmode(GPIO.BOARD)
        GPIO.setwarnings(False)

        # initialize as output and turned ON
        GPIO.setup(self.pin_, GPIO.OUT)
        self.set(True)

    def set(self, onoff):
        if onoff:
            GPIO.output(self.pin_, 1)
            self.state_ = True
        else:
            GPIO.output(self.pin_, 0)
            self.state_ = False

    def on(self):
        self.set(True)

    def off(self):
        self.set(False)

    def __str__(self):
        return "Relay for pin " + str(self.pin_)
