from heatmaster.utils import logging
logger = logging.getLogger(__name__)


class AutoGenerated():
    level = 1

    def __init__(self):
        self.classFinder = {}

    def loadListConfig(self, listConfig):
        members = []
        logger.info(listConfig)
        for item in listConfig:
            group = self.loadConfig(item)
            members = members + group
        return members

    def loadItemization(self, itemization, itemType):
        members = []
        for item in itemization:
            logger.info("Found new item in group: " + str(item))
            item_instance = itemType(config=item)
            members.append(item_instance)
        return members

    def loadConfig(self, config):
        logger.info("loadConfig from: " + str(config))
        members = []
        for k, v in config.items():
            logger.info(" Key: " + str(k) + " : " + str(v))
            keyClass = self.classFinder[k]
            logger.info(keyClass)

            o = keyClass(config=v)
            if (o):
                members.append(o)
        logger.info(members)

        return members

    def inspect(self, realTree=False):
        if realTree:
            logger.info(self.__str__() + "\n" + self.realTree(""))
        else:
            self.fakeTree()

    def realTree(self, prefix):
        string = ""

        try:
            for child in self.children:
                if child == self.children[-1]:
                    string = string + (prefix + "└── " + child.__str__()) + "\n"
                    string = string + child.realTree(prefix + "    ")
                else:
                    string = string + (prefix + "├── " + child.__str__()) + "\n"
                    string = string + child.realTree(prefix + "│   ")
        except AttributeError:
            logger.info("Object {} has no children".format(self))
            pass
        return string

    def fakeTree(self):
        prefix = "--" * AutoGenerated.level

        for each in self.children:
            logger.info(prefix, "-"*80)
            logger.info(prefix, "This is ", each.__str__())
            AutoGenerated.level += 1
            try:
                each.fakeTree()
            except AttributeError:
                logger.info("Object {} has no inspection".format(each))
                pass
            AutoGenerated.level -= 1
