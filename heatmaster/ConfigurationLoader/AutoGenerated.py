class AutoGenerated():
    level = 1

    def __init__(self):
        self.classFinder = {}

    def loadListConfig(self, listConfig):
        members = []
        print(listConfig)
        for item in listConfig:
            group = self.loadConfig(item)
            members = members + group
        return members

    def loadItemization(self, itemization, itemType):
        members = []
        for item in itemization:
            print ("Found new item in group: ", item)
            item_instance = itemType(config = item)
            members.append (item_instance)
        return members

    def loadConfig(self, config):
        print("loadConfig from: ", config)
        members = []
        for k, v in config.items():
            print (" Key: ", k, " : ", v)
            keyClass = self.classFinder[k]
            print (keyClass)

            o = keyClass(config = v)
            if (o):
                members.append(o)
        print (members)

        return members

    def inspect(self, realTree = False):
        if realTree:
            print (self.__str__() + "\n" + self.realTree(""))
        else:
            self.fakeTree()

    def realTree(self, prefix):
        string = ""

        try:
            for child in self.children:
                if child == self.children[-1]:
                    string = string + (prefix + "└── " + child.__str__()) + "\n"
                    string = string + child.realTree( prefix + "    ")
                else:
                    string = string + (prefix + "├── " + child.__str__()) + "\n"
                    string = string + child.realTree( prefix + "│   ")
        except AttributeError as e:
            #print (prefix, "Object ", each, " has no inspection")
            pass
        return string

    def fakeTree(self):
        prefix = "--" * AutoGenerated.level

        for each in self.children:
            print (prefix, "-------------------------------------------------------")
            print (prefix, "This is ", each.__str__())
            AutoGenerated.level+=1
            try:
                each.fakeTree()
            except AttributeError as e:
                #print (prefix, "Object ", each, " has no inspection")
                pass
            AutoGenerated.level-=1
