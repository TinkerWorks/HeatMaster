from heatmaster.ConfigurationLoader.AutoGenerated import AutoGenerated
from heatmaster.heater.mqttheater import MqttHeater
from heatmaster.utils.trigger import Trigger


from heatmaster.utils import logging
logger = logging.getLogger(__name__)

class Heater(Trigger, AutoGenerated):
    def __init__(self, config=None):
        AutoGenerated.__init__(self)

        self.classFinder = {
            "mqtt": MqttHeater,
        }

        self.children = self.loadConfig(config)
        self.registerCallback(self.children, self.propagate)

    def __str__(self):
        return "Heater Group"

    def setHeating(self, heating):
        logger.warn("set heating to {}".format(heating))
        for child in self.children:
            try:
                child.setHeating(heating)
            except AttributeError:
                logger.spam("Object {} has no attribute \'setHeating\'".format(child))
