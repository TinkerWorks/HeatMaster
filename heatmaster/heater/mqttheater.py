from ConfigurationLoader.AutoGenerated import AutoGenerated
from temperature.mqttproxy import MqttProxy
from tigger.trigger import Trigger
import datetime;

class MqttHeater(Trigger, AutoGenerated):
    def __init__(self, config = None, topic = None):
        AutoGenerated.__init__(self)
        self.mqtt_ = MqttProxy()

        self.classFinder = {
            "currentTopic": self.setCurrentTopic,
            "setTopic": self.setSetTopic}

        if(topic):
            self.setTopic(topic)
        elif(config):
            self.loadConfig(config)

        self.subscribe()

    def subscribe(self):
        self.mqtt_.subscribeToTopic(self.currentTopic_, self.updateState)
        print("will sign function ", self.updateState)

    def publish(self, message):
        self.mqtt_.publish.single

    def convertStringToTrueFalse(self, binaryvalue):
        onoffstring = binaryvalue.decode("utf-8")
        if (onoffstring is None):
            raise(Hell)
        elif (onoffstring == "0"):
            return False
        elif (onoffstring == "1"):
            return True
        elif (onoffstring.lower() == "on"):
            return True
        elif (onoffstring.lower() == "off"):
            return False
        else:
            raise(Hell)

    def updateState(self, arg):
        print("here updateState ", self, " with: ", arg)
        state = self.convertStringToTrueFalse(arg)

        self.state_ = state
        self.timestamp_ = datetime.datetime.now().timestamp()

        self.propagate(None, self.state_)

    def setCurrentTopic(self, config):
        self.currentTopic_ = config

    def setSetTopic(self, config):
        self.setTopic_ = config

    def __str__(self):
        return "MqttHeater at topics: (current):" + str(self.currentTopic_) + " (set):" + str(self.setTopic_)

    def on(self):
        pass

    def off(self):
        pass
