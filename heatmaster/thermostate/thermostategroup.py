from heatmaster.thermostate.thermostate import Thermostate
from heatmaster.ConfigurationLoader.AutoGenerated import AutoGenerated
from heatmaster.utils.trigger import Trigger

from termcolor import colored

from heatmaster.utils import logging
logger = logging.getLogger(__name__)


class ThermostateGroup(Trigger, AutoGenerated):

    color = {True: 'green',
             False: 'red'}

    def __init__(self, config=None):
        AutoGenerated.__init__(self)
        Trigger.__init__(self)

        logger.info("ThermostateGroup config: " + str(config))
        logger.info("######### This is a thermostate GROUP START #########")

        self.children = self.loadItemization(config, Thermostate)
        self.registerCallback(self.children, self.propagate)

        logger.info("######### This is a thermostate GROUP  END  #########")

    def __str__(self):
        hs = self.getHeatingStatus()
        return "Thermostate group to unify control says {}".format(
            colored(str(hs).upper(), ThermostateGroup.color[hs]))

    def calculate(self):
        for child in self.children:
            child.calculate()

    def getHeatingStatus(self):
        hs = False
        for child in self.children:
            chs = child.getHeatingStatus()
            if chs is None:
                continue
            hs = hs or chs
        return hs
