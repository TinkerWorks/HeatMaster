from heatmaster.actuators.electrovalve import Electrovalve
from heatmaster.temperature.temperaturegroup import TemperatureGroup
from heatmaster.ConfigurationLoader.AutoGenerated import AutoGenerated
from heatmaster.utils.trigger import Trigger
from heatmaster.temperature.mqttproxy import MqttProxy
import math

import logging
logger = logging.getLogger(__name__)

MIN_TEMPERATURE = 10
MAX_TEMPERATURE = 40
DEFAULT_TEMPERATURE = 25


class Thermostate(Trigger, AutoGenerated):

    def __init__(self, config=None):
        AutoGenerated.__init__(self)
        Trigger.__init__(self)
        self.__set_point = DEFAULT_TEMPERATURE

        self.classFinder = {"name": self.setName,
                            "electrovalve": Electrovalve,
                            "temperature": TemperatureGroup}

        self.HYSTERESIS_LOW = -0.1
        self.HYSTERESIS_HIGH = +0.1

        self.mqtt_ = MqttProxy()

        self.children = self.loadConfig(config)

        self.registerCallback(self.children, self.propagate)

        self.mqtt_.subscribeToTopic(self.generateSetPointTopicSet(),
                                    self.setSetPoint)

    def __str__(self):
        return "Thermostate {} currently {} degrees, set to {} degrees, heating is {}".format(
            self.name_,
            self.temperature(),
            self.__set_point,
            self.getHeatingStatus())

    def setName(self, config):
        self.name_ = config

    def generateSetPointTopicSet(self):
        topic = self.generateSetPointTopicState()
        topic += "/" + "set"

        return topic

    def generateSetPointTopicState(self):
        topic = "heatmaster"  # TODO: remove hard-coding
        topic += "/" + self.name_
        topic += "/" + "set_point"

        return topic

    def setSetPoint(self, setPoint):
        sp = float(setPoint)

        if (sp < MIN_TEMPERATURE):
            return False
        if (sp > MAX_TEMPERATURE):
            return False

        self.__set_point = sp
        self.mqtt_.publish(self.generateSetPointTopicState(), sp)
        return True

    def temperature(self):
        t = None
        for child in self.children:
            try:
                t = child.value()
            except AttributeError:
                pass
        return t

    def setElectrovalve(self, onoff):
        for child in self.children:
            try:
                child.set(onoff)
            except AttributeError:
                pass

    def hasNoDecisionPower(self):
        return self.temperature() is None

    def getHeatingStatus(self):
        if self.hasNoDecisionPower():
            return None
        
        hs = None
        for child in self.children:
            try:
                hs = child.stateBool()
            except AttributeError:
                pass

        return hs
    
    def calculate(self):
        t = self.temperature()

        if t is None or math.isnan(t):
            return

        if(t < self.__set_point + self.HYSTERESIS_LOW):
            self.setElectrovalve(True)

        if(t > self.__set_point + self.HYSTERESIS_HIGH):
            self.setElectrovalve(False)
