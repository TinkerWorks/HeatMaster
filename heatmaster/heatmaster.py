from heatmaster.ConfigurationLoader.AutoGenerated import AutoGenerated

from heatmaster.thermostate.thermostategroup import ThermostateGroup
from heatmaster.temperature.mqttproxy import MqttProxy
from heatmaster.heater.heater import Heater
from heatmaster.utils.trigger import Trigger

from threading import Event
import time

from heatmaster.utils import logging
logger = logging.getLogger(__name__)


class HeatMaster(Trigger, AutoGenerated):

    def __init__(self, config=None):
        AutoGenerated.__init__(self)
        Trigger.__init__(self)

        self.recalculateEvent = Event()

        self.classFinder = {
            "mqtt": MqttProxy.initializeConfig,
            "thermostates": ThermostateGroup,
            "heater": Heater}
        logger.info(self.classFinder)

        if(config):
            self.children = self.loadConfig(config)

        self.registerCallback(self.children, self.recalculateTrigger)

        logger.warning("-"*16 + " INSPECT START TIME " + "-"*16)
        self.inspect(True)
        logger.warning("-"*16 + " INSPECT END TIME " + "-"*16)

    def recalculateTrigger(self, chain, arg):
        logger.notice("trigger recalculation because of %s" % chain)
        self.recalculateEvent.set()

    def run(self, timeout_seconds=0):
        seconds = time.time()
        while timeout_seconds == 0 or time.time() < seconds + timeout_seconds:
            self.recalculateEvent.wait(10)
            logger.info("!!!!!!!! Woken up !!!!!!")
            self.recalculateEvent.clear()
