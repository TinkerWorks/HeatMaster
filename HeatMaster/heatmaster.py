from ConfigurationLoader.Parser import Parser
from ConfigurationLoader.AutoGenerated import AutoGenerated

from thermostate.thermostategroup import ThermostateGroup
from temperature.mqttproxy import MqttProxy
from heater.heater import Heater
from tigger.trigger import Trigger
from threading import Event

import time

class HeatMaster(Trigger, AutoGenerated):

    def __init__(self, config = None):
        AutoGenerated.__init__(self)
        Trigger.__init__(self)

        self.recalculateEvent = Event()

        print (self.classFinder)

        self.classFinder = {
            "mqtt": MqttProxy,
            "thermostates" : ThermostateGroup,
            "heater" : Heater}

        if(config):
            self.children = self.loadConfig(config)

        self.registerCallback(self.children, self.recalculateTrigger)

        print ("----------------------------------------- INSPECT START TIME -----------------------------------------")
        self.inspect(True)
        print ("------------------------------------------ INSPECT END TIME ------------------------------------------")

    def recalculateTrigger(self, chain, arg):
        print(" ")
        print ("HEATMASTER trigger recalculation because of ", chain)
        print(" ")

        self.recalculateEvent.set()

    def run(self):
        while True:
            self.recalculateEvent.wait(10)
            print ("!!!!!!!! Woken up !!!!!!")
            self.recalculateEvent.clear()


if __name__ == "__main__":
    import sys
    confFile = sys.argv[1]
    ps = Parser(confFile)

    hm = HeatMaster(config = ps.getConfiguration())
    hm.run()
