from temperature.temperature import Temperature
from ConfigurationLoader.AutoGenerated import AutoGenerated
from temperature.mqttproxy import MqttProxy
import datetime;

class MqttTemperature(Temperature, AutoGenerated):
    def __init__(self, config = None, topic = None, callback = None):
        AutoGenerated.__init__(self)
        Temperature.__init__(self)
        self.mqtt_ = MqttProxy()
        self.temperature_ = float('nan')
        self.classFinder = {"topic": self.setTopic}

        self.setCallback(callback)

        if(topic):
            self.setTopic(topic)
        elif(config):
            self.loadConfig(config)

        self.subscribe()

    def subscribe(self):
        self.mqtt_.subscribeToTopic(self.topic_, self.updateTemperature)
        print("will sign function ", self.updateTemperature)

    def setTopic(self, config):
        self.topic_ = config

    def updateTemperature(self, temp):
        print("here updateTemperature ", self, " with: ", temp)
        self.temperature_ = float(temp)
        self.timestamp_ = datetime.datetime.now().timestamp()

        self.propagate(None, self.temperature_)

    def get(self):
        return self.temperature_

    def getTime(self):
        return self.timestamp_

    def __str__(self):
        return "MQTT-driven temperature input from " + str(self.topic_)


if __name__ == "__main__":
    host = "mqtt.tinker.haus"
    port = 1883

    def updatefunc():
        print ("needchangenow !!\n")

    mqttBroker = MqttProxy(host, port)

    m1 = MqttTemperature("raspberry-sensor-dev/temperature/current", callback = updatefunc)
    m2 = MqttTemperature("raspberry-sensor-dev/humidity/current", callback = updatefunc)


    while True:
        import time

        print("Temperature 1 is ", m1.get())
        print("Temperature 2 is ", m2.get())

        time.sleep(1)
