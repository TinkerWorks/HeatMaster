from ConfigurationLoader.AutoGenerated import AutoGenerated

try:
    import RPi.GPIO as GPIO
except ModuleNotFoundError as e:
    print ("Running on PC, so ", e, " is FIIIIIINE!!!!")

class Relay(AutoGenerated):

    def setPin(self, config):
        self.pin_ = config

    def __init__(self, config = None, pin = None):
        super().__init__()
        self.classFinder = {"pin": self.setPin}

        if(config):
            self.loadConfig(config)
        elif(pin):
            setPin(pin)

        try:
            # for some reason, disable GPIO Warnings
            GPIO.setmode(GPIO.BOARD)
            GPIO.setwarnings(False)

            # initialize as output and turned ON
            GPIO.setup(self.pin_, GPIO.OUT)
            self.set(True)
        except NameError as e:
            print ("Running on PC, so ", e, " is FIIIIIINE!!!!")


    def set(self, onoff):
        try:
            if onoff:
                GPIO.output(self.pin_, 1)
                self.state_ = True
            else:
                GPIO.output(self.pin_, 0)
                self.state_ = False
        except NameError as e:
            print ("Running on PC, so ", e, " is FIIIIIINE!!!!")


    def on(self):
        self.set(True)

    def off(self):
        self.set(False)

    def __str__(self):
        return "Relay for pin " + str(self.pin_)
